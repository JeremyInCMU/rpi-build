From 4fea6362bca4689ec6e862fd6aab983b4fd8a731 Mon Sep 17 00:00:00 2001
From: Lubomir Rintel <lkundrak@v3.sk>
Date: Sun, 7 Apr 2013 20:22:46 +0200
Subject: [PATCH] WIP: cpufreq: Add Broadcom BCM2835 CPU frequency control
 driver

This adds a driver for a CPU frequency control driven via mailbox IPC present
on Broadcom BCM2835 SoC, used in Raspberry Pi and Roku 2 devices.

Signed-off-by: Dom Cobley <popcornmix@gmail.com>
Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
Cc: Stephen Warren <swarren@wwwdotorg.org>
Cc: cpufreq@vger.kernel.org
Cc: linux-pm@vger.kernel.org
Cc: linux-rpi-kernel@lists.infradead.org
---
 .../bindings/cpufreq/brcm,bcm2835-cpufreq.txt      |  13 ++
 arch/arm/mach-bcm2835/Kconfig                      |   1 +
 drivers/cpufreq/Kconfig.arm                        |   8 +
 drivers/cpufreq/Makefile                           |   1 +
 drivers/cpufreq/bcm2835-cpufreq.c                  | 233 +++++++++++++++++++++
 5 files changed, 256 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/cpufreq/brcm,bcm2835-cpufreq.txt
 create mode 100644 drivers/cpufreq/bcm2835-cpufreq.c

diff --git a/Documentation/devicetree/bindings/cpufreq/brcm,bcm2835-cpufreq.txt b/Documentation/devicetree/bindings/cpufreq/brcm,bcm2835-cpufreq.txt
new file mode 100644
index 0000000..3b21b50e
--- /dev/null
+++ b/Documentation/devicetree/bindings/cpufreq/brcm,bcm2835-cpufreq.txt
@@ -0,0 +1,13 @@
+Broadcom BCM2835 CPU frequency control
+
+Required properties:
+
+- compatible : should be "brcm,bcm2835-cpufreq"
+- brcm,bcm2835-mbox : mailbox used to talk to the CPU frequency control
+
+Example:
+
+cpufreq {
+	compatible = "brcm,bcm2835-cpufreq";
+	brcm,bcm2835-mbox = <&mailbox>;
+};
diff --git a/arch/arm/mach-bcm2835/Kconfig b/arch/arm/mach-bcm2835/Kconfig
index 560045ca..d16b3f0 100644
--- a/arch/arm/mach-bcm2835/Kconfig
+++ b/arch/arm/mach-bcm2835/Kconfig
@@ -1,6 +1,7 @@
 config ARCH_BCM2835
 	bool "Broadcom BCM2835 family" if ARCH_MULTI_V6
 	select ARCH_REQUIRE_GPIOLIB
+	select ARCH_HAS_CPUFREQ
 	select ARM_AMBA
 	select ARM_ERRATA_411920
 	select ARM_TIMER_SP804
diff --git a/drivers/cpufreq/Kconfig.arm b/drivers/cpufreq/Kconfig.arm
index 6e57543..6ececb9 100644
--- a/drivers/cpufreq/Kconfig.arm
+++ b/drivers/cpufreq/Kconfig.arm
@@ -150,3 +150,11 @@ config ARM_SPEAR_CPUFREQ
 	default y
 	help
 	  This adds the CPUFreq driver support for TEGRA SOCs.
+
+config ARM_BCM2835_CPUFREQ
+	tristate "BCM2835 CPUFreq support"
+	depends on BCM2835_MBOX
+	help
+	  This adds the CPUFreq driver for BCM2835
+
+	  If in doubt, say N.
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 315b923..7b3c9d6 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -52,6 +52,7 @@ obj-$(CONFIG_ARM_DT_BL_CPUFREQ)		+= arm_big_little_dt.o
 
 obj-$(CONFIG_ARCH_DAVINCI_DA850)	+= davinci-cpufreq.o
 obj-$(CONFIG_UX500_SOC_DB8500)		+= dbx500-cpufreq.o
+obj-$(CONFIG_ARM_BCM2835_CPUFREQ)	+= bcm2835-cpufreq.o
 obj-$(CONFIG_ARM_EXYNOS_CPUFREQ)	+= exynos-cpufreq.o
 obj-$(CONFIG_ARM_EXYNOS4210_CPUFREQ)	+= exynos4210-cpufreq.o
 obj-$(CONFIG_ARM_EXYNOS4X12_CPUFREQ)	+= exynos4x12-cpufreq.o
diff --git a/drivers/cpufreq/bcm2835-cpufreq.c b/drivers/cpufreq/bcm2835-cpufreq.c
new file mode 100644
index 0000000..2e48262
--- /dev/null
+++ b/drivers/cpufreq/bcm2835-cpufreq.c
@@ -0,0 +1,233 @@
+/*
+ * This driver dynamically manages the CPU Frequency of the ARM processor.
+ * Messages are sent to Videocore either setting or requesting the
+ * frequency of the ARM in order to match an appropiate frequency to the
+ * current usage of the processor. The policy which selects the frequency
+ * to use is defined in the kernel .config file, but can be changed during
+ * runtime.
+ *
+ * Copyright 2011 Broadcom Corporation.  All rights reserved.
+ * Copyright 2013 Lubomir Rintel
+ *
+ * Unless you and Broadcom execute a separate written software license
+ * agreement governing use of this software, this software is licensed to you
+ * under the terms of the GNU General Public License version 2, available at
+ * http://www.broadcom.com/licenses/GPLv2.php (the "GPL").
+ *
+ * Notwithstanding the above, under no circumstances may you combine this
+ * software in any way with any other Broadcom software provided under a
+ * license other than the GPL, without Broadcom's express prior written
+ * consent.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/cpufreq.h>
+#include <linux/dma-mapping.h>
+#include <linux/mailbox.h>
+#include <linux/platform_device.h>
+
+#define VCMSG_SET_CLOCK_RATE	0x00038002
+#define VCMSG_GET_CLOCK_RATE	0x00030002
+#define VCMSG_GET_MIN_CLOCK	0x00030007
+#define VCMSG_GET_MAX_CLOCK	0x00030004
+#define VCMSG_ID_ARM_CLOCK	0x00000003	/* Clock/Voltage ID's */
+
+/* tag part of the message */
+struct vc_msg_tag {
+	u32 tag_id;		/* the message id */
+	u32 buffer_size;	/* size of the buffer (8 bytes) */
+	u32 data_size;		/* amount of data being sent or received */
+	u32 dev_id;		/* the ID of the clock/voltage to get or set */
+	u32 val;		/* the value (e.g. rate (in Hz)) to set */
+} __packed;
+
+/* message structure to be sent to videocore */
+struct vc_msg {
+	u32 msg_size;		/* simply, sizeof(struct vc_msg) */
+	u32 request_code;	/* holds various information like thei
+				 * success and number of bytes returned */
+	struct vc_msg_tag tag;	/* the tag structure above to make */
+	u32 end_tag;		/* an end identifier, should be set to NULL */
+} __packed;
+
+/* clk_rate either gets or sets the clock rates.  */
+static u32 bcm2835_cpufreq_set_clock(int cur_rate, int arm_rate)
+{
+	int ret;
+	int actual_rate = 0;
+	dma_addr_t msg_bus;
+	struct vc_msg *msg;
+
+	msg = dma_alloc_coherent(NULL, PAGE_ALIGN(sizeof(*msg)), &msg_bus,
+							GFP_KERNEL);
+	if (!msg)
+		return -ENOMEM;
+
+	/* wipe all previous message data */
+	memset(msg, 0, sizeof(*msg));
+
+	msg->msg_size = sizeof(*msg);
+
+	msg->tag.tag_id = VCMSG_SET_CLOCK_RATE;
+	msg->tag.buffer_size = 8;
+	msg->tag.data_size = 8;	/* we're sending the clock ID and the
+				 * knew rates which is a total of 2 words */
+	msg->tag.dev_id = VCMSG_ID_ARM_CLOCK;
+	msg->tag.val = arm_rate * 1000;
+
+	/* send the message */
+	ret = bcm2835_mbox_property(msg_bus);
+
+	/* check if it was all ok and return the rate in KHz */
+	if (ret == 0 && (msg->request_code & 0x80000000))
+		actual_rate = msg->tag.val/1000;
+
+	dma_free_coherent(NULL, PAGE_ALIGN(sizeof(*msg)), msg, msg_bus);
+	return actual_rate;
+}
+
+static u32 bcm2835_cpufreq_get_clock(int tag)
+{
+	int ret;
+	int arm_rate = 0;
+	dma_addr_t msg_bus;
+	struct vc_msg *msg;
+
+	msg = dma_alloc_coherent(NULL, PAGE_ALIGN(sizeof(*msg)), &msg_bus,
+							GFP_KERNEL);
+	if (!msg)
+		return -ENOMEM;
+
+	/* wipe all previous message data */
+	memset(msg, 0, sizeof(*msg));
+
+	msg->msg_size = sizeof(*msg);
+	msg->tag.tag_id = tag;
+	msg->tag.buffer_size = 8;
+	msg->tag.data_size = 4;	/* we're just sending the clock ID which
+				 * is one word long */
+	msg->tag.dev_id = VCMSG_ID_ARM_CLOCK;
+
+	/* send the message */
+	ret = bcm2835_mbox_property(msg_bus);
+
+	/* check if it was all ok and return the rate in KHz */
+	if (ret == 0 && (msg->request_code & 0x80000000))
+		arm_rate = msg->tag.val/1000;
+
+	dma_free_coherent(NULL, PAGE_ALIGN(sizeof(*msg)), msg, msg_bus);
+	return arm_rate;
+}
+
+/* Initialisation function sets up the CPU policy for first use */
+static int bcm2835_cpufreq_init(struct cpufreq_policy *policy)
+{
+	/* measured value of how long it takes to change frequency */
+	policy->cpuinfo.transition_latency = 355000; /* ns */
+
+	/* now find out what the maximum and minimum frequencies are */
+	policy->min = bcm2835_cpufreq_get_clock(VCMSG_GET_MIN_CLOCK);
+	policy->max = bcm2835_cpufreq_get_clock(VCMSG_GET_MAX_CLOCK);
+	policy->cur = bcm2835_cpufreq_get_clock(VCMSG_GET_CLOCK_RATE);
+
+	policy->cpuinfo.min_freq = policy->min;
+	policy->cpuinfo.max_freq = policy->max;
+
+	return 0;
+}
+
+/* Target function chooses the most appropriate frequency from the table
+ * to enable */
+static int bcm2835_cpufreq_target(struct cpufreq_policy *policy,
+						unsigned int target_freq,
+						unsigned int relation)
+{
+	unsigned int target = target_freq;
+	u32 cur;
+
+	/* if we are above min and using ondemand, then just use max */
+	if (strcmp("ondemand", policy->governor->name) == 0 &&
+					target > policy->min)
+		target = policy->max;
+
+	/* if the frequency is the same, just quit */
+	if (target == policy->cur)
+		return 0;
+
+	/* otherwise were good to set the clock frequency */
+	policy->cur = bcm2835_cpufreq_set_clock(policy->cur, target);
+
+	cur = bcm2835_cpufreq_set_clock(policy->cur, target);
+	if (!cur)
+		return -EINVAL;
+
+	policy->cur = cur;
+	return 0;
+}
+
+static unsigned int bcm2835_cpufreq_get(unsigned int cpu)
+{
+	return bcm2835_cpufreq_get_clock(VCMSG_GET_CLOCK_RATE);
+}
+
+/* Verify ensures that when a policy is changed, it is suitable for the
+ * CPU to use */
+static int bcm2835_cpufreq_verify(struct cpufreq_policy *policy)
+{
+	return 0;
+}
+
+/* the CPUFreq driver */
+static struct cpufreq_driver bcm2835_cpufreq = {
+	.name = "bcm2835-cpufreq",
+	.owner = THIS_MODULE,
+	.init = bcm2835_cpufreq_init,
+	.verify = bcm2835_cpufreq_verify,
+	.target = bcm2835_cpufreq_target,
+	.get = bcm2835_cpufreq_get
+};
+
+static int bcm2835_cpufreq_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct device *dev = &pdev->dev;
+
+	ret = cpufreq_register_driver(&bcm2835_cpufreq);
+	if (ret) {
+		dev_err(dev, "Could not register cpufreq driver\n");
+		return ret;
+
+	}
+
+	dev_info(dev, "Broadcom BCM2835 CPU frequency control driver\n");
+	return 0;
+}
+
+static int bcm2835_cpufreq_remove(struct platform_device *dev)
+{
+	cpufreq_unregister_driver(&bcm2835_cpufreq);
+	return 0;
+}
+
+static const struct of_device_id bcm2835_cpufreq_of_match[] = {
+	{ .compatible = "brcm,bcm2835-cpufreq", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, bcm2835_cpufreq_of_match);
+
+static struct platform_driver bcm2835_cpufreq_driver = {
+	.probe = bcm2835_cpufreq_probe,
+	.remove = bcm2835_cpufreq_remove,
+	.driver = {
+		.name = "bcm2835-cpufreq",
+		.owner = THIS_MODULE,
+		.of_match_table = bcm2835_cpufreq_of_match,
+	},
+};
+module_platform_driver(bcm2835_cpufreq_driver);
+
+MODULE_AUTHOR("Dorian Peake and Dom Cobley and Lubomir Rintel");
+MODULE_DESCRIPTION("BCM2835 CPU frequency control driver");
+MODULE_LICENSE("GPL v2");
-- 
1.8.4

