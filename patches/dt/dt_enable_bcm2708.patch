diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index f0895c5..014305d 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -39,6 +39,7 @@ dtb-$(CONFIG_ARCH_AT91)	+= sama5d33ek.dtb
 dtb-$(CONFIG_ARCH_AT91)	+= sama5d34ek.dtb
 dtb-$(CONFIG_ARCH_AT91)	+= sama5d35ek.dtb
 
+dtb-$(CONFIG_ARCH_BCM2708) += bcm2708-rpi-b.dtb
 dtb-$(CONFIG_ARCH_BCM2835) += bcm2835-rpi-b.dtb
 dtb-$(CONFIG_ARCH_BCM) += bcm11351-brt.dtb
 dtb-$(CONFIG_ARCH_DAVINCI) += da850-enbw-cmc.dtb \
diff --git a/arch/arm/mach-bcm2708/Makefile b/arch/arm/mach-bcm2708/Makefile
index 0da162c..78386a2 100644
--- a/arch/arm/mach-bcm2708/Makefile
+++ b/arch/arm/mach-bcm2708/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_BCM2708_VCMEM)	+= vc_mem.o
 obj-$(CONFIG_BCM2708_DMAER)	+= dmaer_master.o
 dmaer_master-objs		:= dmaer.o vc_support.o
 
+obj-$(CONFIG_PINCTRL_BCM2708)   += pinctrl-bcm2708.o
diff --git a/arch/arm/mach-bcm2708/Kconfig b/arch/arm/mach-bcm2708/Kconfig
index b85bb8d..0c09d5e 100644
--- a/arch/arm/mach-bcm2708/Kconfig
+++ b/arch/arm/mach-bcm2708/Kconfig
@@ -46,4 +46,23 @@ config BCM2708_DMAER
         help
           Enable DMA helper for accelerating X composition

+config PINCTRL_BCM2708
+	bool
+	select PINMUX
+	select PINCONF
+
+config BCM2708_DT
+	bool "Use Device Tree"
+	depends on MACH_BCM2708
+	default n
+	select NEED_MACH_GPIO_H
+	select USE_OF
+	select COMMON_CLK
+	select COMMON_CLK_DEBUG
+	select BCM2708_GPIO
+	select PINCTRL
+	select PINCTRL_BCM2708
+	help
+	  Device Tree and pinctrl support
+
 endmenu
diff --git a/arch/arm/mach-bcm2708/armctrl.c b/arch/arm/mach-bcm2708/armctrl.c
index 274aa30..3e60999 100644
--- a/arch/arm/mach-bcm2708/armctrl.c
+++ b/arch/arm/mach-bcm2708/armctrl.c
@@ -23,6 +23,8 @@
 #include <linux/version.h>
 #include <linux/syscore_ops.h>
 #include <linux/interrupt.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
 
 #include <asm/mach/irq.h>
 #include <mach/hardware.h>
@@ -79,6 +81,100 @@ static void armctrl_unmask_irq(struct irq_data *d)
 	}
 }
 
+#if defined(CONFIG_BCM2708_DT)
+
+#define NR_IRQS_BANK0           21
+#define NR_BANKS                3 + 1
+#define IRQS_PER_BANK           32
+
+/* from drivers/irqchip/irq-bcm2835.c */
+static int armctrl_xlate(struct irq_domain *d, struct device_node *ctrlr,
+        const u32 *intspec, unsigned int intsize,
+        unsigned long *out_hwirq, unsigned int *out_type)
+{
+        if (WARN_ON(intsize != 2))
+                return -EINVAL;
+
+        if (WARN_ON(intspec[0] >= NR_BANKS))
+                return -EINVAL;
+
+        if (WARN_ON(intspec[1] >= IRQS_PER_BANK))
+                return -EINVAL;
+
+        if (WARN_ON(intspec[0] == 0 && intspec[1] >= NR_IRQS_BANK0))
+                return -EINVAL;
+
+	if (intspec[0] == 0)
+		*out_hwirq = ARM_IRQ0_BASE + intspec[1];
+	else if (intspec[0] == 1)
+		*out_hwirq = ARM_IRQ1_BASE + intspec[1];
+	else if (intspec[0] == 2)
+		*out_hwirq = ARM_IRQ2_BASE + intspec[1];
+	else /* use bank 3 for GPIO interrupts */
+		*out_hwirq = GPIO_IRQ_START + intspec[1];
+
+	/* reverse remap_irqs[] */
+	switch (*out_hwirq) {
+	case INTERRUPT_VC_JPEG:
+		*out_hwirq = INTERRUPT_JPEG;
+		break;
+	case INTERRUPT_VC_USB:
+		*out_hwirq = INTERRUPT_USB;
+		break;
+	case INTERRUPT_VC_3D:
+		*out_hwirq = INTERRUPT_3D;
+		break;
+	case INTERRUPT_VC_DMA2:
+		*out_hwirq = INTERRUPT_DMA2;
+		break;
+	case INTERRUPT_VC_DMA3:
+		*out_hwirq = INTERRUPT_DMA3;
+		break;
+	case INTERRUPT_VC_I2C:
+		*out_hwirq = INTERRUPT_I2C;
+		break;
+	case INTERRUPT_VC_SPI:
+		*out_hwirq = INTERRUPT_SPI;
+		break;
+	case INTERRUPT_VC_I2SPCM:
+		*out_hwirq = INTERRUPT_I2SPCM;
+		break;
+	case INTERRUPT_VC_SDIO:
+		*out_hwirq = INTERRUPT_SDIO;
+		break;
+	case INTERRUPT_VC_UART:
+		*out_hwirq = INTERRUPT_UART;
+		break;
+	case INTERRUPT_VC_ARASANSDIO:
+		*out_hwirq = INTERRUPT_ARASANSDIO;
+		break;
+	}
+
+        *out_type = IRQ_TYPE_NONE;
+        return 0;
+}
+
+static struct irq_domain_ops armctrl_ops = {
+        .xlate = armctrl_xlate
+};
+
+void __init armctrl_dt_init(void)
+{
+	struct device_node *np;
+	struct irq_domain *domain;
+
+	np = of_find_compatible_node(NULL, NULL, "brcm,bcm2708-armctrl-ic");
+	if (!np)
+		return;
+
+        domain = irq_domain_add_legacy(np, NR_IRQS, IRQ_ARMCTRL_START, 0,
+					&armctrl_ops, NULL);
+        WARN_ON(!domain);
+}
+#else
+void __init armctrl_dt_init(void) { }
+#endif /* CONFIG_BCM2708_DT */
+
 #if defined(CONFIG_PM)
 
 /* for kernels 3.xx use the new syscore_ops apis but for older kernels use the sys dev class */
@@ -215,5 +311,6 @@ int __init armctrl_init(void __iomem * base, unsigned int irq_start,
 
 	armctrl_pm_register(base, irq_start, resume_sources);
 	init_FIQ(FIQ_START);
+	armctrl_dt_init();
 	return 0;
 }
diff --git a/arch/arm/mach-bcm2708/bcm2708.c b/arch/arm/mach-bcm2708/bcm2708.c
index 5662c1a..2d0f706 100644
--- a/arch/arm/mach-bcm2708/bcm2708.c
+++ b/arch/arm/mach-bcm2708/bcm2708.c
@@ -33,6 +33,8 @@
 #include <linux/module.h>
 #include <linux/spi/spi.h>
 #include <linux/w1-gpio.h>
+#include <linux/clk/bcm2835.h>
+#include <linux/of_platform.h>
 
 #include <linux/version.h>
 #include <linux/clkdev.h>
@@ -690,10 +692,68 @@ static void bcm2708_power_off(void)
 	}
 }
 
+#if defined(CONFIG_BCM2708_DT)
+static bool __init bcm2708_dt_init(void)
+{
+	struct device_node *np;
+	u32 linux_revision;
+	u64 linux_serial;
+	int ret;
+
+	if (!of_have_populated_dt()) {
+		early_printk("Device Tree is missing!\n");
+		pr_emerg("Device Tree is missing!\n");
+		BUG();
+	}
+
+#if defined(CONFIG_BCM_VC_CMA)
+	vc_cma_early_init();
+#endif
+	pm_power_off = bcm2708_power_off;
+
+	bcm2835_init_clocks();
+
+	bcm_register_device(&bcm2708_gpio_device);
+//	bcm_register_device(&bcm2708_systemtimer_device);
+	if (!fiq_fix_enable)
+	{
+		bcm2708_usb_device.resource = bcm2708_usb_resources_no_fiq_fix;
+		bcm2708_usb_device.num_resources = ARRAY_SIZE(bcm2708_usb_resources_no_fiq_fix);
+	}
+	bcm_register_device(&bcm2708_usb_device);
+//	bcm_register_device(&bcm2708_powerman_device);
+
+	ret = of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
+	if (ret) {
+		early_printk("bcm2708: of_platform_populate failed: %d\n", ret);
+		pr_emerg("bcm2708: of_platform_populate failed: %d\n", ret);
+		BUG();
+	}
+
+	np = of_find_node_by_path("/system");
+	if (np) {
+		if (!of_property_read_u32(np, "linux,revision", &linux_revision))
+			system_rev = linux_revision;
+		if (!of_property_read_u64(np, "linux,serial", &linux_serial))
+			system_serial_low = (u32)linux_serial;
+		of_node_put(np);
+	}
+
+	return true;
+}
+#else
+static bool __init bcm2708_dt_init(void)
+{
+	return false;
+}
+#endif /* CONFIG_BCM2708_DT */
+
 void __init bcm2708_init(void)
 {
 	int i;
 
+	if (bcm2708_dt_init())
+		return;
 #if defined(CONFIG_BCM_VC_CMA)
 	vc_cma_early_init();
 #endif
@@ -900,6 +960,11 @@ static void __init board_reserve(void)
 #endif
 }
 
+static const char * const bcm2708_compat[] = {
+	"brcm,bcm2708",
+	NULL
+};
+
 MACHINE_START(BCM2708, "BCM2708")
     /* Maintainer: Broadcom Europe Ltd. */
 	.map_io = bcm2708_map_io,
@@ -913,6 +978,7 @@ MACHINE_START(BCM2708, "BCM2708")
 	.init_early = bcm2708_init_early,
 	.restart = bcm2708_restart,
 	.reserve = board_reserve,
+	.dt_compat = bcm2708_compat,
 MACHINE_END

 module_param(boardrev, uint, 0644);
diff --git a/arch/arm/mach-bcm2708/clock.c b/arch/arm/mach-bcm2708/clock.c
index 4fc556e..d4bae02 100644
--- a/arch/arm/mach-bcm2708/clock.c
+++ b/arch/arm/mach-bcm2708/clock.c
@@ -31,6 +31,7 @@
 
 #include "clock.h"
 
+#ifndef CONFIG_BCM2708_DT
 int clk_enable(struct clk *clk)
 {
 	return 0;
@@ -59,3 +60,4 @@ int clk_set_rate(struct clk *clk, unsigned long rate)
 	return -EIO;
 }
 EXPORT_SYMBOL(clk_set_rate);
+#endif
diff --git a/arch/arm/mach-bcm2708/dma.c b/arch/arm/mach-bcm2708/dma.c
index 51d147a..c6d3694 100644
--- a/arch/arm/mach-bcm2708/dma.c
+++ b/arch/arm/mach-bcm2708/dma.c
@@ -1,3 +1,4 @@
+#define DEBUG
 /*
  *  linux/arch/arm/mach-bcm2708/dma.c
  *
@@ -13,6 +14,7 @@
 #include <linux/platform_device.h>
 #include <linux/module.h>
 #include <linux/scatterlist.h>
+#include <linux/of.h>
 
 #include <mach/dma.h>
 #include <mach/irqs.h>
@@ -289,6 +291,16 @@ static int bcm_dmaman_probe(struct platform_device *pdev)
 	void __iomem *dma_base = NULL;
 	int have_dma_region = 0;
 
+	if (pdev->dev.of_node) {
+		u32 channels;
+		if (!of_property_read_u32(pdev->dev.of_node,
+					"broadcom,channels", &channels)) {
+			dev_dbg(&pdev->dev,
+				"broadcom,channels = 0x%x\n", channels);
+			dmachans = channels;
+		}
+	}
+
 	dmaman = kzalloc(sizeof(*dmaman), GFP_KERNEL);
 	if (NULL == dmaman) {
 		printk(KERN_ERR DRIVER_NAME ": failed to allocate "
@@ -353,6 +365,12 @@ static int bcm_dmaman_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id bcm_dmaman_match[] = {
+	{ .compatible = "brcm,bcm2708-dma", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, bcm_dmaman_match);
+
 static struct platform_driver bcm_dmaman_driver = {
 	.probe = bcm_dmaman_probe,
 	.remove = bcm_dmaman_remove,
@@ -360,6 +378,7 @@ static struct platform_driver bcm_dmaman_driver = {
 	.driver = {
 		   .name = DRIVER_NAME,
 		   .owner = THIS_MODULE,
+		   .of_match_table = bcm_dmaman_match,
 		   },
 };
 
diff --git a/arch/arm/mach-bcm2708/vc_mem.c b/arch/arm/mach-bcm2708/vc_mem.c
index aeae4d5..450326a 100644
--- a/arch/arm/mach-bcm2708/vc_mem.c
+++ b/arch/arm/mach-bcm2708/vc_mem.c
@@ -22,6 +22,7 @@
 #include <linux/proc_fs.h>
 #include <asm/uaccess.h>
 #include <linux/dma-mapping.h>
+#include <linux/of.h>
 
 #ifdef CONFIG_ARCH_KONA
 #include <chal/chal_ipc.h>
@@ -36,7 +37,7 @@
 #define DRIVER_NAME  "vc-mem"
 
 // Uncomment to enable debug logging
-// #define ENABLE_DBG
+#define ENABLE_DBG
 
 #if defined(ENABLE_DBG)
 #define LOG_DBG( fmt, ... )  printk( KERN_INFO fmt "\n", ##__VA_ARGS__ )
@@ -355,6 +356,24 @@ vc_mem_proc_write(struct file *file, const char __user * buffer,
 *
 ***************************************************************************/
 
+#ifdef CONFIG_BCM2708_DT
+static void __init
+vc_mem_of_parse(void)
+{
+	u32 reg[2];
+	struct device_node *np = of_find_node_by_path("/axi/vc_mem");
+
+	if (np && !of_property_read_u32_array(np, "reg", reg, 2)) {
+		LOG_DBG("/axi/vc_mem/reg = <0x%04X 0x%04X>\n", reg[0], reg[1]);
+		mem_base = reg[0];
+		mem_size = reg[1];
+	}
+	of_node_put(np);
+}
+#else
+static void __init vc_mem_of_parse(void) { }
+#endif
+
 static int __init
 vc_mem_init(void)
 {
@@ -363,6 +382,7 @@ vc_mem_init(void)
 
 	LOG_DBG("%s: called", __func__);
 
+	vc_mem_of_parse();
 	mm_vc_mem_phys_addr = phys_addr;
 	mm_vc_mem_size = mem_size;
 	mm_vc_mem_base = mem_base;
diff --git a/arch/arm/mach-bcm2708/vcio.c b/arch/arm/mach-bcm2708/vcio.c
index 599eb63..c0337f2 100644
--- a/arch/arm/mach-bcm2708/vcio.c
+++ b/arch/arm/mach-bcm2708/vcio.c
@@ -435,6 +435,12 @@ static int bcm_vcio_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id bcm_mbox_match[] = {
+	{ .compatible = "brcm,bcm2835-mbox", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, bcm_mbox_match);
+
 static struct platform_driver bcm_mbox_driver = {
 	.probe = bcm_vcio_probe,
 	.remove = bcm_vcio_remove,
@@ -442,6 +448,7 @@ static struct platform_driver bcm_mbox_driver = {
 	.driver = {
 		   .name = DRIVER_NAME,
 		   .owner = THIS_MODULE,
+		   .of_match_table = bcm_mbox_match,
 		   },
 };
 
diff --git a/drivers/clk/Makefile b/drivers/clk/Makefile
index 137d3e7..18d7916 100644
--- a/drivers/clk/Makefile
+++ b/drivers/clk/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_COMMON_CLK)	+= clk-composite.o
 
 # SoCs specific
 obj-$(CONFIG_ARCH_BCM2835)	+= clk-bcm2835.o
+obj-$(CONFIG_BCM2708_DT)	+= clk-bcm2835.o
 obj-$(CONFIG_ARCH_NOMADIK)	+= clk-nomadik.o
 obj-$(CONFIG_ARCH_HIGHBANK)	+= clk-highbank.o
 obj-$(CONFIG_ARCH_MXS)		+= mxs/
