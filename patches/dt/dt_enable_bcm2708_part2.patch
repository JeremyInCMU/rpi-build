diff --git a/arch/arm/boot/dts/bcm2708-rpi-b.dts b/arch/arm/boot/dts/bcm2708-rpi-b.dts
new file mode 100644
--- /dev/null
+++ b/arch/arm/boot/dts/bcm2708-rpi-b.dts
@@ -0,0 +1,214 @@
+/dts-v1/;
+
+/memreserve/ 0x1c000000 0x04000000;
+
+/include/ "bcm2708.dtsi"
+
+/ {
+	compatible = "brcm,bcm2708";
+	model = "Raspberry Pi Model B";
+
+	memory {
+		reg = <0 0>;
+	};
+
+	chosen {
+		bootargs = "debug dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait";
+	};
+
+	leds {
+		compatible = "gpio-leds";
+		pinctrl-names = "default";
+		pinctrl-0 = <&act_pin>;
+
+		act {
+			label = "ACT";
+			gpios = <&gpio 16 1>;
+			default-state = "keep";
+			linux,default-trigger = "mmc0";
+		};
+	};
+
+	gpio_keys_polled {
+		compatible = "gpio-keys-polled";
+		status = "disabled";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		poll-interval = <1000>;
+		autorepeat;
+		button@a {
+			label = "GPIO Key A";
+			linux,code = <30>;
+			gpios = <&gpio 24 1>;
+		};
+	};
+
+	gpio_keys {
+		compatible = "gpio-keys";
+		status = "disabled";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+		button@a {
+			label = "GPIO Key A";
+			linux,code = <30>;
+			gpios = <&gpio 25 1>;
+		};
+	};
+
+	system {
+                linux,serial = <0x00000000 0x00000000>;
+                linux,revision = <0x00000000>;
+	};
+
+	display {
+		compatible = "brcm,bcm2708-fb";
+		broadcom,width = <0x00000000>;
+		broadcom,height = <0x00000000>;
+		broadcom,depth = <0x00000000>;
+		status = "okay";
+	};
+
+	axi {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		vc_mem {
+			reg = <0x1ec00000 0x20000000>;
+		};
+
+		usb {
+			hub {
+				ethernet {
+					mac-address = [00 00 00 00 00 00];
+				};
+			};
+		};
+
+		dma {
+			broadcom,channels = <0x00000000>;
+		};
+
+//		sdhci {
+//			clock-frequency = <0x00000000>;
+//		};
+
+//		uart0 {
+//			clock-frequency = <0x00000000>;
+//		};
+	};
+
+	onewire {
+		compatible = "w1-gpio";
+		gpios = <&gpio 4 0>;
+		status = "disabled";
+	};
+
+	aliases {
+		spi0 = &spi;
+		i2c1 = &i2c1;
+	};
+};
+
+&gpio {
+	pinctrl-names = "default";
+	pinctrl-0 = <&lan_pin &sdcard_pins &uart0_pins &audio_pins &spi0_pins &i2c_pins &gpiokeys>;
+
+	audio_pins: audio {
+		brcm,pins = <40 45>;
+		brcm,function = <4>; /* alt0 */
+	};
+
+	sdcard_pins: sdcard {
+		brcm,pins = <48 49 50 51 52 53>;
+		brcm,function = <7>; /* alt3 */
+	};
+
+	/* LAN_RUN/n_reset */
+	lan_pin: lan {
+		brcm,pins = <6>;
+		brcm,function = <1>; /* GPIO out */
+	};
+
+	uart0_pins: uart0 {
+		brcm,pins = <14 15>;
+		brcm,function = <4>; /* alt0 */
+	};
+
+	spi0_pins: spi0 {
+		brcm,pins = <7 8 9 10 11>;
+		brcm,function = <4>; /* alt0 */
+	};
+
+	i2c_pins: i2c {
+		brcm,pins = <0 1 2 3>;
+		brcm,function = <4>; /* alt0 */
+	};
+
+	gpiokeys: gpiokeys {
+		brcm,pins = <25 24>;
+		brcm,function = <0>; /* GPIO in */
+		brcm,pull = <2>; /* pull up */
+		status = "disabled";
+	};
+
+	act_pin: act { /* ACT led */
+		brcm,pins = <16>;
+		brcm,function = <1>; /* GPIO out */
+	};
+
+};
+
+&spi {
+	status = "disabled";
+
+	spidev@0{
+		compatible = "spidev";
+		reg = <0>;	/* CE0 */
+		#address-cells = <1>;
+		#size-cells = <0>;
+		spi-max-frequency = <500000>;
+		// Mode 0 (CPOL = 0, CPHA = 0)
+		status = "okay";
+	};
+
+	spidev@1{
+		compatible = "spidev";
+		reg = <1>;	/* CE1 */
+		#address-cells = <1>;
+		#size-cells = <0>;
+		spi-max-frequency = <500000>;
+		// Mode 0 (CPOL = 0, CPHA = 0)
+		status = "okay";
+	};
+
+	tsc2046@1 {
+		compatible = "ti,tsc2046";
+		reg = <1>;	/* CE1 */
+		interrupts = <3 17>;	/* bank 3 is GPIO interrupts */
+		spi-max-frequency = <2000000>;
+		pendown-gpio = <&gpio 17 0>;
+
+		ti,x-min = /bits/ 16 <230>;
+		ti,x-max = /bits/ 16 <3850>;
+		ti,y-min = /bits/ 16 <190>;
+		ti,y-max = /bits/ 16 <3850>;
+		ti,x-plate-ohms = /bits/ 16 <60>;
+		ti,pressure-max = /bits/ 16 <255>;
+
+		linux,wakeup;
+		status = "disabled";
+	};
+
+};
+
+&i2c1 {
+	status = "disabled";
+	clock-frequency = <100000>;
+};
+
+&sdhci {
+        status = "okay";
+        bus-width = <4>;
+};
diff --git a/arch/arm/boot/dts/bcm2708.dtsi b/arch/arm/boot/dts/bcm2708.dtsi
new file mode 100644
--- /dev/null
+++ b/arch/arm/boot/dts/bcm2708.dtsi
@@ -0,0 +1,146 @@
+/include/ "skeleton.dtsi"
+
+/ {
+	compatible = "brcm,bcm2708";
+	model = "BCM2708";
+
+	interrupt-parent = <&intc>;
+
+	chosen {
+		bootargs = "earlyprintk console=ttyAMA0";
+	};
+
+	axi {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges = <0x7e000000 0x20000000 0x02000000>;
+
+		intc: interrupt-controller {
+			compatible = "brcm,bcm2708-armctrl-ic";
+			reg = <0x7e00b200 0x200>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+
+		mailbox: mailbox {
+			compatible = "brcm,bcm2835-mbox";
+			reg = <0x7e00b880 0x40>;
+			interrupts = <0 1>;
+		};
+
+		dma {
+			compatible = "brcm,bcm2708-dma";
+			reg = <0x7e007000 0x40>;
+		};
+
+                uart@20201000 {
+                        compatible = "brcm,bcm2835-pl011", "arm,pl011", "arm,primecell";
+                        reg = <0x7e201000 0x1000>;
+                        interrupts = <2 25>;
+                        clock-frequency = <3000000>;
+                        arm,primecell-periphid = <0x00241011>;
+                };
+
+		gpio: gpio {
+			compatible = "brcm,bcm2708-pinctrl";
+			reg = <0x7e200000 0xb4>;
+			gpio-controller;
+			#gpio-cells = <2>;
+		};
+
+                sdhci: sdhci {
+                        compatible = "brcm,bcm2708-sdhci";
+                        reg = <0x7e300000 0x100>;
+                        interrupts = <2 30>;
+                        clocks = <&clk_mmc>;
+                        status = "disabled";
+                };
+
+		spi: spi-bcm2708 {
+			compatible = "brcm,bcm2708-spi";
+			reg = <0x7e204000 0x1000>;
+			interrupts = <2 22>;
+			clocks = <&clk_spi>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "disabled";
+		};
+
+		i2c0: i2c@20205000 {
+			compatible = "brcm,bcm2708-i2c";
+			reg = <0x7e205000 0x1000>;
+			interrupts = <2 21>;
+			clocks = <&clk_i2c>;
+			status = "disabled";
+		};
+
+		i2c1: i2c@20804000 {
+			compatible = "brcm,bcm2708-i2c";
+			reg = <0x7e804000 0x1000>;
+			interrupts = <2 21>;
+			clocks = <&clk_i2c>;
+			status = "disabled";
+		};
+
+		hwmon {
+			compatible = "brcm,bcm2835-hwmon";
+		};
+
+		thermal {
+			compatible = "brcm,bcm2835-thermal";
+		};
+
+		audio@0 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@1 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@2 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@3 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@4 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@5 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@6 {
+			compatible = "brcm,bcm2835-audio";
+		};
+		audio@7 {
+			compatible = "brcm,bcm2835-audio";
+		};
+	};
+
+	clocks {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+                clk_mmc: mmc {
+                        compatible = "fixed-clock";
+                        reg = <0>;
+                        #clock-cells = <0>;
+                        clock-frequency = <100000000>;
+                };
+
+		clk_i2c: i2c {
+			compatible = "fixed-clock";
+			reg = <1>;
+			#clock-cells = <0>;
+			clock-frequency = <250000000>;
+		};
+
+		clk_spi: spi {
+			compatible = "fixed-clock";
+			reg = <2>;
+			#clock-cells = <0>;
+			clock-frequency = <250000000>;
+		};
+	};
+};
diff --git a/arch/arm/mach-bcm2708/pinctrl-bcm2708.c b/arch/arm/mach-bcm2708/pinctrl-bcm2708.c
new file mode 100644
--- /dev/null
+++ b/arch/arm/mach-bcm2708/pinctrl-bcm2708.c
@@ -0,0 +1,728 @@
+#define DEBUG
+/*
+ * Driver for Broadcom BCM2708 GPIO unit (pinctrl only)
+ *
+ * Copyright (C) 2012 Chris Boot, Simon Arlott, Stephen Warren
+ * Copyright (C) 2013 Noralf Tronnes
+ *
+ * This driver is copied from pinctrl-bcm2835.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/bitmap.h>
+#include <linux/bug.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinconf.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/platform_device.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+
+#define MODULE_NAME "pinctrl-bcm2708"
+#define BCM2708_NUM_GPIOS 54
+
+#define BCM2708_PIN_BITMAP_SZ \
+	DIV_ROUND_UP(BCM2708_NUM_GPIOS, sizeof(unsigned long) * 8)
+
+/* GPIO register offsets */
+#define GPFSEL0		0x0	/* Function Select */
+#define GPSET0		0x1c	/* Pin Output Set */
+#define GPCLR0		0x28	/* Pin Output Clear */
+#define GPLEV0		0x34	/* Pin Level */
+#define GPEDS0		0x40	/* Pin Event Detect Status */
+#define GPREN0		0x4c	/* Pin Rising Edge Detect Enable */
+#define GPFEN0		0x58	/* Pin Falling Edge Detect Enable */
+#define GPHEN0		0x64	/* Pin High Detect Enable */
+#define GPLEN0		0x70	/* Pin Low Detect Enable */
+#define GPAREN0		0x7c	/* Pin Async Rising Edge Detect */
+#define GPAFEN0		0x88	/* Pin Async Falling Edge Detect */
+#define GPPUD		0x94	/* Pin Pull-up/down Enable */
+#define GPPUDCLK0	0x98	/* Pin Pull-up/down Enable Clock */
+
+#define FSEL_REG(p)		(GPFSEL0 + (((p) / 10) * 4))
+#define FSEL_SHIFT(p)		(((p) % 10) * 3)
+#define GPIO_REG_OFFSET(p)	((p) / 32)
+#define GPIO_REG_SHIFT(p)	((p) % 32)
+
+enum bcm2708_pinconf_param {
+	/* argument: bcm2708_pinconf_pull */
+	BCM2708_PINCONF_PARAM_PULL,
+};
+
+enum bcm2708_pinconf_pull {
+	BCM2708_PINCONFIG_PULL_NONE,
+	BCM2708_PINCONFIG_PULL_DOWN,
+	BCM2708_PINCONFIG_PULL_UP,
+};
+
+#define BCM2708_PINCONF_PACK(_param_, _arg_) ((_param_) << 16 | (_arg_))
+#define BCM2708_PINCONF_UNPACK_PARAM(_conf_) ((_conf_) >> 16)
+#define BCM2708_PINCONF_UNPACK_ARG(_conf_) ((_conf_) & 0xffff)
+
+struct bcm2708_gpio_irqdata {
+	struct bcm2708_pinctrl *pc;
+	int bank;
+};
+
+struct bcm2708_pinctrl {
+	struct device *dev;
+	void __iomem *base;
+
+	struct pinctrl_dev *pctl_dev;
+	struct gpio_chip *gpio_chip;
+	struct pinctrl_gpio_range gpio_range;
+};
+
+/* pins are just named GPIO0..GPIO53 */
+#define BCM2708_GPIO_PIN(a) PINCTRL_PIN(a, "gpio" #a)
+struct pinctrl_pin_desc bcm2708_gpio_pins[] = {
+	BCM2708_GPIO_PIN(0),
+	BCM2708_GPIO_PIN(1),
+	BCM2708_GPIO_PIN(2),
+	BCM2708_GPIO_PIN(3),
+	BCM2708_GPIO_PIN(4),
+	BCM2708_GPIO_PIN(5),
+	BCM2708_GPIO_PIN(6),
+	BCM2708_GPIO_PIN(7),
+	BCM2708_GPIO_PIN(8),
+	BCM2708_GPIO_PIN(9),
+	BCM2708_GPIO_PIN(10),
+	BCM2708_GPIO_PIN(11),
+	BCM2708_GPIO_PIN(12),
+	BCM2708_GPIO_PIN(13),
+	BCM2708_GPIO_PIN(14),
+	BCM2708_GPIO_PIN(15),
+	BCM2708_GPIO_PIN(16),
+	BCM2708_GPIO_PIN(17),
+	BCM2708_GPIO_PIN(18),
+	BCM2708_GPIO_PIN(19),
+	BCM2708_GPIO_PIN(20),
+	BCM2708_GPIO_PIN(21),
+	BCM2708_GPIO_PIN(22),
+	BCM2708_GPIO_PIN(23),
+	BCM2708_GPIO_PIN(24),
+	BCM2708_GPIO_PIN(25),
+	BCM2708_GPIO_PIN(26),
+	BCM2708_GPIO_PIN(27),
+	BCM2708_GPIO_PIN(28),
+	BCM2708_GPIO_PIN(29),
+	BCM2708_GPIO_PIN(30),
+	BCM2708_GPIO_PIN(31),
+	BCM2708_GPIO_PIN(32),
+	BCM2708_GPIO_PIN(33),
+	BCM2708_GPIO_PIN(34),
+	BCM2708_GPIO_PIN(35),
+	BCM2708_GPIO_PIN(36),
+	BCM2708_GPIO_PIN(37),
+	BCM2708_GPIO_PIN(38),
+	BCM2708_GPIO_PIN(39),
+	BCM2708_GPIO_PIN(40),
+	BCM2708_GPIO_PIN(41),
+	BCM2708_GPIO_PIN(42),
+	BCM2708_GPIO_PIN(43),
+	BCM2708_GPIO_PIN(44),
+	BCM2708_GPIO_PIN(45),
+	BCM2708_GPIO_PIN(46),
+	BCM2708_GPIO_PIN(47),
+	BCM2708_GPIO_PIN(48),
+	BCM2708_GPIO_PIN(49),
+	BCM2708_GPIO_PIN(50),
+	BCM2708_GPIO_PIN(51),
+	BCM2708_GPIO_PIN(52),
+	BCM2708_GPIO_PIN(53),
+};
+
+/* one pin per group */
+static const char * const bcm2708_gpio_groups[] = {
+	"gpio0",
+	"gpio1",
+	"gpio2",
+	"gpio3",
+	"gpio4",
+	"gpio5",
+	"gpio6",
+	"gpio7",
+	"gpio8",
+	"gpio9",
+	"gpio10",
+	"gpio11",
+	"gpio12",
+	"gpio13",
+	"gpio14",
+	"gpio15",
+	"gpio16",
+	"gpio17",
+	"gpio18",
+	"gpio19",
+	"gpio20",
+	"gpio21",
+	"gpio22",
+	"gpio23",
+	"gpio24",
+	"gpio25",
+	"gpio26",
+	"gpio27",
+	"gpio28",
+	"gpio29",
+	"gpio30",
+	"gpio31",
+	"gpio32",
+	"gpio33",
+	"gpio34",
+	"gpio35",
+	"gpio36",
+	"gpio37",
+	"gpio38",
+	"gpio39",
+	"gpio40",
+	"gpio41",
+	"gpio42",
+	"gpio43",
+	"gpio44",
+	"gpio45",
+	"gpio46",
+	"gpio47",
+	"gpio48",
+	"gpio49",
+	"gpio50",
+	"gpio51",
+	"gpio52",
+	"gpio53",
+};
+
+enum bcm2708_fsel {
+	BCM2708_FSEL_GPIO_IN = 0,
+	BCM2708_FSEL_GPIO_OUT = 1,
+	BCM2708_FSEL_ALT0 = 4,
+	BCM2708_FSEL_ALT1 = 5,
+	BCM2708_FSEL_ALT2 = 6,
+	BCM2708_FSEL_ALT3 = 7,
+	BCM2708_FSEL_ALT4 = 3,
+	BCM2708_FSEL_ALT5 = 2,
+	BCM2708_FSEL_COUNT = 8,
+	BCM2708_FSEL_MASK = 0x7,
+};
+
+static const char * const bcm2708_functions[BCM2708_FSEL_COUNT] = {
+	[BCM2708_FSEL_GPIO_IN] = "gpio_in",
+	[BCM2708_FSEL_GPIO_OUT] = "gpio_out",
+	[BCM2708_FSEL_ALT0] = "alt0",
+	[BCM2708_FSEL_ALT1] = "alt1",
+	[BCM2708_FSEL_ALT2] = "alt2",
+	[BCM2708_FSEL_ALT3] = "alt3",
+	[BCM2708_FSEL_ALT4] = "alt4",
+	[BCM2708_FSEL_ALT5] = "alt5",
+};
+
+static inline u32 bcm2708_gpio_rd(struct bcm2708_pinctrl *pc, unsigned reg)
+{
+	return readl(pc->base + reg);
+}
+
+static inline void bcm2708_gpio_wr(struct bcm2708_pinctrl *pc, unsigned reg,
+		u32 val)
+{
+	writel(val, pc->base + reg);
+}
+
+static inline int bcm2708_gpio_get_bit(struct bcm2708_pinctrl *pc, unsigned reg,
+		unsigned bit)
+{
+	reg += GPIO_REG_OFFSET(bit) * 4;
+	return (bcm2708_gpio_rd(pc, reg) >> GPIO_REG_SHIFT(bit)) & 1;
+}
+
+/* note NOT a read/modify/write cycle */
+static inline void bcm2708_gpio_set_bit(struct bcm2708_pinctrl *pc,
+		unsigned reg, unsigned bit)
+{
+	reg += GPIO_REG_OFFSET(bit) * 4;
+	bcm2708_gpio_wr(pc, reg, BIT(GPIO_REG_SHIFT(bit)));
+}
+
+static inline enum bcm2708_fsel bcm2708_pinctrl_fsel_get(
+		struct bcm2708_pinctrl *pc, unsigned pin)
+{
+	u32 val = bcm2708_gpio_rd(pc, FSEL_REG(pin));
+	enum bcm2708_fsel status = (val >> FSEL_SHIFT(pin)) & BCM2708_FSEL_MASK;
+
+	dev_dbg(pc->dev, "get %08x (%u => %s)\n", val, pin,
+			bcm2708_functions[status]);
+
+	return status;
+}
+
+static inline void bcm2708_pinctrl_fsel_set(
+		struct bcm2708_pinctrl *pc, unsigned pin,
+		enum bcm2708_fsel fsel)
+{
+	u32 val = bcm2708_gpio_rd(pc, FSEL_REG(pin));
+	enum bcm2708_fsel cur = (val >> FSEL_SHIFT(pin)) & BCM2708_FSEL_MASK;
+
+	dev_dbg(pc->dev, "read %08x (%u => %s)\n", val, pin,
+			bcm2708_functions[cur]);
+
+	if (cur == fsel)
+		return;
+
+	if (cur != BCM2708_FSEL_GPIO_IN && fsel != BCM2708_FSEL_GPIO_IN) {
+		/* always transition through GPIO_IN */
+		val &= ~(BCM2708_FSEL_MASK << FSEL_SHIFT(pin));
+		val |= BCM2708_FSEL_GPIO_IN << FSEL_SHIFT(pin);
+
+		dev_dbg(pc->dev, "trans %08x (%u <= %s)\n", val, pin,
+				bcm2708_functions[BCM2708_FSEL_GPIO_IN]);
+		bcm2708_gpio_wr(pc, FSEL_REG(pin), val);
+	}
+
+	val &= ~(BCM2708_FSEL_MASK << FSEL_SHIFT(pin));
+	val |= fsel << FSEL_SHIFT(pin);
+
+	dev_dbg(pc->dev, "write %08x (%u <= %s)\n", val, pin,
+			bcm2708_functions[fsel]);
+	bcm2708_gpio_wr(pc, FSEL_REG(pin), val);
+}
+
+static int bcm2708_pctl_get_groups_count(struct pinctrl_dev *pctldev)
+{
+	return ARRAY_SIZE(bcm2708_gpio_groups);
+}
+
+static const char *bcm2708_pctl_get_group_name(struct pinctrl_dev *pctldev,
+		unsigned selector)
+{
+	return bcm2708_gpio_groups[selector];
+}
+
+static int bcm2708_pctl_get_group_pins(struct pinctrl_dev *pctldev,
+		unsigned selector,
+		const unsigned **pins,
+		unsigned *num_pins)
+{
+	*pins = &bcm2708_gpio_pins[selector].number;
+	*num_pins = 1;
+
+	return 0;
+}
+
+static void bcm2708_pctl_pin_dbg_show(struct pinctrl_dev *pctldev,
+		struct seq_file *s,
+		unsigned offset)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+	enum bcm2708_fsel fsel = bcm2708_pinctrl_fsel_get(pc, offset);
+	const char *fname = bcm2708_functions[fsel];
+	int value = bcm2708_gpio_get_bit(pc, GPLEV0, offset);
+
+	seq_printf(s, "function '%s', value '%s'", fname, value ? "hi" : "lo");
+}
+
+static void bcm2708_pctl_dt_free_map(struct pinctrl_dev *pctldev,
+		struct pinctrl_map *maps, unsigned num_maps)
+{
+	int i;
+
+	for (i = 0; i < num_maps; i++)
+		if (maps[i].type == PIN_MAP_TYPE_CONFIGS_PIN)
+			kfree(maps[i].data.configs.configs);
+
+	kfree(maps);
+}
+
+static int bcm2708_pctl_dt_node_to_map_func(struct bcm2708_pinctrl *pc,
+		struct device_node *np, u32 pin, u32 fnum,
+		struct pinctrl_map **maps)
+{
+	struct pinctrl_map *map = *maps;
+
+	if (fnum >= ARRAY_SIZE(bcm2708_functions)) {
+		dev_err(pc->dev, "%s: invalid brcm,function %d\n",
+			of_node_full_name(np), fnum);
+		return -EINVAL;
+	}
+
+	map->type = PIN_MAP_TYPE_MUX_GROUP;
+	map->data.mux.group = bcm2708_gpio_groups[pin];
+	map->data.mux.function = bcm2708_functions[fnum];
+	(*maps)++;
+
+	return 0;
+}
+
+static int bcm2708_pctl_dt_node_to_map_pull(struct bcm2708_pinctrl *pc,
+		struct device_node *np, u32 pin, u32 pull,
+		struct pinctrl_map **maps)
+{
+	struct pinctrl_map *map = *maps;
+	unsigned long *configs;
+
+	if (pull > 2) {
+		dev_err(pc->dev, "%s: invalid brcm,pull %d\n",
+			of_node_full_name(np), pull);
+		return -EINVAL;
+	}
+
+	configs = kzalloc(sizeof(*configs), GFP_KERNEL);
+	if (!configs)
+		return -ENOMEM;
+	configs[0] = BCM2708_PINCONF_PACK(BCM2708_PINCONF_PARAM_PULL, pull);
+
+	map->type = PIN_MAP_TYPE_CONFIGS_PIN;
+	map->data.configs.group_or_pin = bcm2708_gpio_pins[pin].name;
+	map->data.configs.configs = configs;
+	map->data.configs.num_configs = 1;
+	(*maps)++;
+
+	return 0;
+}
+
+static int bcm2708_pctl_dt_node_to_map(struct pinctrl_dev *pctldev,
+		struct device_node *np,
+		struct pinctrl_map **map, unsigned *num_maps)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+	struct property *pins, *funcs, *pulls;
+	int num_pins, num_funcs, num_pulls, maps_per_pin;
+	struct pinctrl_map *maps, *cur_map;
+	int i, err;
+	u32 pin, func, pull;
+
+	pins = of_find_property(np, "brcm,pins", NULL);
+	if (!pins) {
+		dev_err(pc->dev, "%s: missing brcm,pins property\n",
+				of_node_full_name(np));
+		return -EINVAL;
+	}
+
+	funcs = of_find_property(np, "brcm,function", NULL);
+	pulls = of_find_property(np, "brcm,pull", NULL);
+
+	if (!funcs && !pulls) {
+		dev_err(pc->dev,
+			"%s: neither brcm,function nor brcm,pull specified\n",
+			of_node_full_name(np));
+		return -EINVAL;
+	}
+
+	num_pins = pins->length / 4;
+	num_funcs = funcs ? (funcs->length / 4) : 0;
+	num_pulls = pulls ? (pulls->length / 4) : 0;
+
+	if (num_funcs > 1 && num_funcs != num_pins) {
+		dev_err(pc->dev,
+			"%s: brcm,function must have 1 or %d entries\n",
+			of_node_full_name(np), num_pins);
+		return -EINVAL;
+	}
+
+	if (num_pulls > 1 && num_pulls != num_pins) {
+		dev_err(pc->dev,
+			"%s: brcm,pull must have 1 or %d entries\n",
+			of_node_full_name(np), num_pins);
+		return -EINVAL;
+	}
+
+	maps_per_pin = 0;
+	if (num_funcs)
+		maps_per_pin++;
+	if (num_pulls)
+		maps_per_pin++;
+	cur_map = maps = kzalloc(num_pins * maps_per_pin * sizeof(*maps),
+				GFP_KERNEL);
+	if (!maps)
+		return -ENOMEM;
+
+	for (i = 0; i < num_pins; i++) {
+		err = of_property_read_u32_index(np, "brcm,pins", i, &pin);
+		if (err)
+			goto out;
+		if (pin >= ARRAY_SIZE(bcm2708_gpio_pins)) {
+			dev_err(pc->dev, "%s: invalid brcm,pins value %d\n",
+				of_node_full_name(np), pin);
+			err = -EINVAL;
+			goto out;
+		}
+
+		if (num_funcs) {
+			err = of_property_read_u32_index(np, "brcm,function",
+					(num_funcs > 1) ? i : 0, &func);
+			if (err)
+				goto out;
+			err = bcm2708_pctl_dt_node_to_map_func(pc, np, pin,
+							func, &cur_map);
+			if (err)
+				goto out;
+		}
+		if (num_pulls) {
+			err = of_property_read_u32_index(np, "brcm,pull",
+					(num_funcs > 1) ? i : 0, &pull);
+			if (err)
+				goto out;
+			err = bcm2708_pctl_dt_node_to_map_pull(pc, np, pin,
+							pull, &cur_map);
+			if (err)
+				goto out;
+		}
+	}
+
+	*map = maps;
+	*num_maps = num_pins * maps_per_pin;
+
+	return 0;
+
+out:
+	kfree(maps);
+	return err;
+}
+
+static const struct pinctrl_ops bcm2708_pctl_ops = {
+	.get_groups_count = bcm2708_pctl_get_groups_count,
+	.get_group_name = bcm2708_pctl_get_group_name,
+	.get_group_pins = bcm2708_pctl_get_group_pins,
+	.pin_dbg_show = bcm2708_pctl_pin_dbg_show,
+	.dt_node_to_map = bcm2708_pctl_dt_node_to_map,
+	.dt_free_map = bcm2708_pctl_dt_free_map,
+};
+
+static int bcm2708_pmx_get_functions_count(struct pinctrl_dev *pctldev)
+{
+	return BCM2708_FSEL_COUNT;
+}
+
+static const char *bcm2708_pmx_get_function_name(struct pinctrl_dev *pctldev,
+		unsigned selector)
+{
+	return bcm2708_functions[selector];
+}
+
+static int bcm2708_pmx_get_function_groups(struct pinctrl_dev *pctldev,
+		unsigned selector,
+		const char * const **groups,
+		unsigned * const num_groups)
+{
+	/* every pin can do every function */
+	*groups = bcm2708_gpio_groups;
+	*num_groups = ARRAY_SIZE(bcm2708_gpio_groups);
+
+	return 0;
+}
+
+static int bcm2708_pmx_enable(struct pinctrl_dev *pctldev,
+		unsigned func_selector,
+		unsigned group_selector)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+
+	bcm2708_pinctrl_fsel_set(pc, group_selector, func_selector);
+
+	return 0;
+}
+
+static void bcm2708_pmx_disable(struct pinctrl_dev *pctldev,
+		unsigned func_selector,
+		unsigned group_selector)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+
+	/* disable by setting to GPIO_IN */
+	bcm2708_pinctrl_fsel_set(pc, group_selector, BCM2708_FSEL_GPIO_IN);
+}
+
+static void bcm2708_pmx_gpio_disable_free(struct pinctrl_dev *pctldev,
+		struct pinctrl_gpio_range *range,
+		unsigned offset)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+
+	/* disable by setting to GPIO_IN */
+	bcm2708_pinctrl_fsel_set(pc, offset, BCM2708_FSEL_GPIO_IN);
+}
+
+static int bcm2708_pmx_gpio_set_direction(struct pinctrl_dev *pctldev,
+		struct pinctrl_gpio_range *range,
+		unsigned offset,
+		bool input)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+	enum bcm2708_fsel fsel = input ?
+		BCM2708_FSEL_GPIO_IN : BCM2708_FSEL_GPIO_OUT;
+
+	bcm2708_pinctrl_fsel_set(pc, offset, fsel);
+
+	return 0;
+}
+
+static const struct pinmux_ops bcm2708_pmx_ops = {
+	.get_functions_count = bcm2708_pmx_get_functions_count,
+	.get_function_name = bcm2708_pmx_get_function_name,
+	.get_function_groups = bcm2708_pmx_get_function_groups,
+	.enable = bcm2708_pmx_enable,
+	.disable = bcm2708_pmx_disable,
+	.gpio_disable_free = bcm2708_pmx_gpio_disable_free,
+	.gpio_set_direction = bcm2708_pmx_gpio_set_direction,
+};
+
+static int bcm2708_pinconf_get(struct pinctrl_dev *pctldev,
+			unsigned pin, unsigned long *config)
+{
+	/* No way to read back config in HW */
+	return -ENOTSUPP;
+}
+
+static int bcm2708_pinconf_set(struct pinctrl_dev *pctldev,
+			unsigned pin, unsigned long config)
+{
+	struct bcm2708_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);
+	enum bcm2708_pinconf_param param = BCM2708_PINCONF_UNPACK_PARAM(config);
+	u16 arg = BCM2708_PINCONF_UNPACK_ARG(config);
+	u32 off, bit;
+
+	if (param != BCM2708_PINCONF_PARAM_PULL)
+		return -EINVAL;
+
+	off = GPIO_REG_OFFSET(pin);
+	bit = GPIO_REG_SHIFT(pin);
+
+	bcm2708_gpio_wr(pc, GPPUD, arg & 3);
+	/*
+	 * Docs say to wait 150 cycles, but not of what. We assume a
+	 * 1 MHz clock here, which is pretty slow...
+	 */
+	udelay(150);
+	bcm2708_gpio_wr(pc, GPPUDCLK0 + (off * 4), BIT(bit));
+	udelay(150);
+	bcm2708_gpio_wr(pc, GPPUDCLK0 + (off * 4), 0);
+
+	return 0;
+}
+
+static const struct pinconf_ops bcm2708_pinconf_ops = {
+	.pin_config_get = bcm2708_pinconf_get,
+	.pin_config_set = bcm2708_pinconf_set,
+};
+
+static struct pinctrl_desc bcm2708_pinctrl_desc = {
+	.name = MODULE_NAME,
+	.pins = bcm2708_gpio_pins,
+	.npins = ARRAY_SIZE(bcm2708_gpio_pins),
+	.pctlops = &bcm2708_pctl_ops,
+	.pmxops = &bcm2708_pmx_ops,
+	.confops = &bcm2708_pinconf_ops,
+	.owner = THIS_MODULE,
+};
+
+static struct pinctrl_gpio_range bcm2708_pinctrl_gpio_range = {
+	.name = MODULE_NAME,
+	.npins = BCM2708_NUM_GPIOS,
+};
+
+
+
+static int bcm2708_pinctrl_gpiochip_find(struct gpio_chip *gc, void *data)
+{
+	/* there is only one gpio chip */
+	printk("\n\n%s: base = %d\n", __func__, gc->base);
+	return 1;
+}
+
+
+static int bcm2708_pinctrl_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct bcm2708_pinctrl *pc;
+	struct gpio_chip *gc;
+	struct resource iomem;
+	int err;
+	BUILD_BUG_ON(ARRAY_SIZE(bcm2708_gpio_pins) != BCM2708_NUM_GPIOS);
+	BUILD_BUG_ON(ARRAY_SIZE(bcm2708_gpio_groups) != BCM2708_NUM_GPIOS);
+
+	gc = gpiochip_find(NULL, bcm2708_pinctrl_gpiochip_find);
+	if (!gc)
+		return -EPROBE_DEFER;
+
+	gc->of_node = np;
+	gc->of_gpio_n_cells = 2;
+	gc->of_xlate = of_gpio_simple_xlate;
+
+	pc = devm_kzalloc(dev, sizeof(*pc), GFP_KERNEL);
+	if (!pc)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, pc);
+	pc->dev = dev;
+
+	err = of_address_to_resource(np, 0, &iomem);
+	if (err) {
+		dev_err(dev, "could not get IO memory\n");
+		return err;
+	}
+
+	pc->base = devm_ioremap_resource(dev, &iomem);
+	if (IS_ERR(pc->base))
+		return PTR_ERR(pc->base);
+
+	pc->gpio_chip = gc;
+
+	pc->pctl_dev = pinctrl_register(&bcm2708_pinctrl_desc, dev, pc);
+	if (!pc->pctl_dev)
+		return -EINVAL;
+
+	pc->gpio_range = bcm2708_pinctrl_gpio_range;
+	pc->gpio_range.base = pc->gpio_chip->base;
+	pc->gpio_range.gc = pc->gpio_chip;
+	pinctrl_add_gpio_range(pc->pctl_dev, &pc->gpio_range);
+
+	return 0;
+}
+
+static int bcm2708_pinctrl_remove(struct platform_device *pdev)
+{
+	struct bcm2708_pinctrl *pc = platform_get_drvdata(pdev);
+
+	pinctrl_unregister(pc->pctl_dev);
+
+	return 0;
+}
+
+static struct of_device_id bcm2708_pinctrl_match[] = {
+	{ .compatible = "brcm,bcm2708-pinctrl" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, bcm2708_pinctrl_match);
+
+static struct platform_driver bcm2708_pinctrl_driver = {
+	.probe = bcm2708_pinctrl_probe,
+	.remove = bcm2708_pinctrl_remove,
+	.driver = {
+		.name = MODULE_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = bcm2708_pinctrl_match,
+	},
+};
+module_platform_driver(bcm2708_pinctrl_driver);
+
+MODULE_AUTHOR("Chris Boot, Simon Arlott, Stephen Warren, Noralf Tronnes");
+MODULE_DESCRIPTION("BCM2708 Pin control driver");
+MODULE_LICENSE("GPL");
