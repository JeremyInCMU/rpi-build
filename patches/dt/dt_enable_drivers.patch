diff --git a/drivers/hwmon/bcm2835-hwmon.c b/drivers/hwmon/bcm2835-hwmon.c
index 5bbed45..d0257c8 100644
--- a/drivers/hwmon/bcm2835-hwmon.c
+++ b/drivers/hwmon/bcm2835-hwmon.c
@@ -202,6 +202,12 @@ static int bcm2835_hwmon_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id bcm2835_hwmon_of_match[] = {
+        { .compatible = "brcm,bcm2835-hwmon" },
+        {},
+};
+MODULE_DEVICE_TABLE(of, bcm2835_hwmon_match);
+
 /* Hwmon Driver */
 static struct platform_driver bcm2835_hwmon_driver = {
 	.probe = bcm2835_hwmon_probe,
@@ -209,6 +215,7 @@ static struct platform_driver bcm2835_hwmon_driver = {
 	.driver = {
 				.name = "bcm2835_hwmon",
 				.owner = THIS_MODULE,
+				.of_match_table = bcm2835_hwmon_of_match,
 			},
 };
 
diff --git a/drivers/i2c/busses/i2c-bcm2708.c b/drivers/i2c/busses/i2c-bcm2708.c
index 33f4e7d..afe077b 100644
--- a/drivers/i2c/busses/i2c-bcm2708.c
+++ b/drivers/i2c/busses/i2c-bcm2708.c
@@ -26,6 +26,7 @@
 #include <linux/spinlock.h>
 #include <linux/clk.h>
 #include <linux/err.h>
+#include <linux/of.h>
 #include <linux/platform_device.h>
 #include <linux/io.h>
 #include <linux/slab.h>
@@ -269,6 +270,21 @@ static int bcm2708_i2c_probe(struct platform_device *pdev)
 	struct bcm2708_i2c *bi;
 	struct i2c_adapter *adap;
 
+	if (pdev->dev.of_node) {
+		u32 bus_clk_rate;
+		pdev->id = of_alias_get_id(pdev->dev.of_node, "i2c");
+		if (pdev->id < 0) {
+			dev_err(&pdev->dev, "alias is missing\n");
+			return -EINVAL;
+		}
+		if (!of_property_read_u32(pdev->dev.of_node,
+					"clock-frequency", &bus_clk_rate))
+			baudrate = bus_clk_rate;
+		else
+			dev_warn(&pdev->dev,
+				"Could not read clock-frequency property\n");
+	}
+
 	regs = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs) {
 		dev_err(&pdev->dev, "could not get IO memory\n");
@@ -375,10 +391,17 @@ static int bcm2708_i2c_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id bcm2708_i2c_of_match[] = {
+        { .compatible = "brcm,bcm2708-i2c" },
+        {},
+};
+MODULE_DEVICE_TABLE(of, bcm2708_i2c_of_match);
+
 static struct platform_driver bcm2708_i2c_driver = {
 	.driver		= {
 		.name	= DRV_NAME,
 		.owner	= THIS_MODULE,
+		.of_match_table = bcm2708_i2c_of_match,
 	},
 	.probe		= bcm2708_i2c_probe,
 	.remove		= bcm2708_i2c_remove,
diff --git a/drivers/mmc/host/sdhci-bcm2708.c b/drivers/mmc/host/sdhci-bcm2708.c
index 4770680..7a4e1f4 100644
--- a/drivers/mmc/host/sdhci-bcm2708.c
+++ b/drivers/mmc/host/sdhci-bcm2708.c
@@ -29,6 +29,7 @@
 #include <linux/mmc/mmc.h>
 #include <linux/mmc/host.h>
 #include <linux/mmc/sd.h>
+#include <linux/clk.h>
 
 #include <linux/io.h>
 #include <linux/dma-mapping.h>
@@ -1174,6 +1175,16 @@ static int sdhci_bcm2708_probe(struct platform_device *pdev)
 
 	BUG_ON(pdev == NULL);
 
+	if (pdev->dev.of_node) {
+		struct clk *clock = devm_clk_get(&pdev->dev, NULL);
+		if (IS_ERR(clock)) {
+			ret = PTR_ERR(clock);
+			dev_err(&pdev->dev, "devm_clk_get() failed, err %d\n", ret);
+			goto err;
+		}
+		emmc_clock_freq = clk_get_rate(clock);
+	}
+
 	iomem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!iomem) {
 		ret = -ENOMEM;
@@ -1361,10 +1372,17 @@ static int sdhci_bcm2708_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id sdhci_bcm2708_of_match[] = {
+        { .compatible = "brcm,bcm2708-sdhci" },
+        {},
+};
+MODULE_DEVICE_TABLE(of, sdhci_bcm2708_of_match);
+
 static struct platform_driver sdhci_bcm2708_driver = {
 	.driver = {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
+		.of_match_table = sdhci_bcm2708_of_match,
 	},
 	.probe		= sdhci_bcm2708_probe,
 	.remove		= sdhci_bcm2708_remove,
diff --git a/drivers/net/usb/smsc95xx.c b/drivers/net/usb/smsc95xx.c
index 60076fe..66ce8ba 100644
--- a/drivers/net/usb/smsc95xx.c
+++ b/drivers/net/usb/smsc95xx.c
@@ -833,6 +833,11 @@ static void smsc95xx_init_mac_address(struct usbnet *dev)
 		}
 	}
 
+	if (!smsc95xx_of_get_mac_address("/axi/usb/hub/ethernet", dev->net->dev_addr)) {
+		netif_dbg(dev, ifup, dev->net, "MAC address read from Device Tree\n");
+		return;
+	}
+
 	/* no eeprom, or eeprom values are invalid. generate random MAC */
 	eth_hw_addr_random(dev->net);
 	netif_dbg(dev, ifup, dev->net, "MAC address set to eth_random_addr\n");
diff --git a/drivers/net/usb/smsc95xx.h b/drivers/net/usb/smsc95xx.h
index f360ee3..23a09a8 100644
--- a/drivers/net/usb/smsc95xx.h
+++ b/drivers/net/usb/smsc95xx.h
@@ -21,6 +21,8 @@
 #ifndef _SMSC95XX_H
 #define _SMSC95XX_H
 
+#include <linux/of_net.h>
+
 /* Tx command words */
 #define TX_CMD_A_DATA_OFFSET_		(0x001F0000)
 #define TX_CMD_A_FIRST_SEG_		(0x00002000)
@@ -288,4 +290,28 @@
 #define INT_ENP_TDFO_			((u32)BIT(12))
 #define INT_ENP_RXDF_			((u32)BIT(11))
 
+#ifdef CONFIG_OF
+static inline int smsc95xx_of_get_mac_address(const char *path, unsigned char *dev_addr)
+{
+	const void *mac_addr;
+	int ret = -ENODATA;
+	struct device_node *np = of_find_node_by_path(path);
+
+	if (!np)
+		return ret;
+	mac_addr = of_get_mac_address(np);
+	if (mac_addr) {
+		memcpy(dev_addr, mac_addr, ETH_ALEN);
+		ret = 0;
+	}
+	of_node_put(np);
+	return ret;
+}
+#else
+static inline int smsc95xx_of_get_mac_address(const char *path, unsigned char *dev_addr)
+{
+	return -EINVAL;
+}
+#endif
+
 #endif /* _SMSC95XX_H */
diff --git a/drivers/spi/spi-bcm2708.c b/drivers/spi/spi-bcm2708.c
index abaa5a6..78016d9 100644
--- a/drivers/spi/spi-bcm2708.c
+++ b/drivers/spi/spi-bcm2708.c
@@ -512,6 +512,7 @@ static int bcm2708_spi_probe(struct platform_device *pdev)
 	master->setup = bcm2708_spi_setup;
 	master->transfer = bcm2708_spi_transfer;
 	master->cleanup = bcm2708_spi_cleanup;
+	master->dev.of_node = pdev->dev.of_node;
 	platform_set_drvdata(pdev, master);
 
 	bs = spi_master_get_devdata(master);
@@ -545,7 +546,7 @@ static int bcm2708_spi_probe(struct platform_device *pdev)
 	}
 
 	/* initialise the hardware */
-	clk_enable(clk);
+	clk_prepare_enable(clk);
 	bcm2708_wr(bs, SPI_CS, SPI_CS_REN | SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX);
 
 	err = spi_register_master(master);
@@ -560,6 +561,7 @@ static int bcm2708_spi_probe(struct platform_device *pdev)
 	return 0;
 
 out_free_irq:
+	clk_disable_unprepare(bs->clk);
 	free_irq(bs->irq, master);
 out_workqueue:
 	destroy_workqueue(bs->workq);
@@ -585,7 +587,7 @@ static int bcm2708_spi_remove(struct platform_device *pdev)
 
 	flush_work_sync(&bs->work);
 
-	clk_disable(bs->clk);
+	clk_disable_unprepare(bs->clk);
 	clk_put(bs->clk);
 	free_irq(bs->irq, master);
 	iounmap(bs->base);
@@ -595,10 +597,17 @@ static int bcm2708_spi_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id bcm2708_spi_match[] = {
+	{ .compatible = "brcm,bcm2708-spi", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, bcm2708_spi_match);
+
 static struct platform_driver bcm2708_spi_driver = {
 	.driver		= {
 		.name	= DRV_NAME,
 		.owner	= THIS_MODULE,
+		.of_match_table	= bcm2708_spi_match,
 	},
 	.probe		= bcm2708_spi_probe,
 	.remove		= bcm2708_spi_remove,
diff --git a/drivers/thermal/bcm2835-thermal.c b/drivers/thermal/bcm2835-thermal.c
index 85fceb5..c214edc 100644
--- a/drivers/thermal/bcm2835-thermal.c
+++ b/drivers/thermal/bcm2835-thermal.c
@@ -167,6 +167,12 @@ static struct thermal_zone_device_ops ops  = {
 	.get_mode = bcm2835_get_mode,
 };
 
+static const struct of_device_id bcm2835_thermal_of_match[] = {
+        { .compatible = "brcm,bcm2835-thermal" },
+        {},
+};
+MODULE_DEVICE_TABLE(of, bcm2835_thermal_of_match);
+
 /* Thermal Driver */
 static struct platform_driver bcm2835_thermal_driver = {
 	.probe = bcm2835_thermal_probe,
@@ -174,6 +180,7 @@ static struct platform_driver bcm2835_thermal_driver = {
 	.driver = {
 				.name = "bcm2835_thermal",
 				.owner = THIS_MODULE,
+				.of_match_table = bcm2835_thermal_of_match,
 			},
 };
 
diff --git a/drivers/video/bcm2708_fb.c b/drivers/video/bcm2708_fb.c
index c10c5ee..2652659 100644
--- a/drivers/video/bcm2708_fb.c
+++ b/drivers/video/bcm2708_fb.c
@@ -27,6 +27,7 @@
 #include <linux/clk.h>
 #include <linux/printk.h>
 #include <linux/console.h>
+#include <linux/of.h>
 
 #include <mach/dma.h>
 #include <mach/platform.h>
@@ -543,6 +544,16 @@ static int bcm2708_fb_probe(struct platform_device *dev)
 	struct bcm2708_fb *fb;
 	int ret;
 
+	if (dev->dev.of_node) {
+		u32 val;
+		if (!of_property_read_u32(dev->dev.of_node, "broadcom,width", &val))
+			fbwidth = val;
+		if (!of_property_read_u32(dev->dev.of_node, "broadcom,height", &val))
+			fbheight = val;
+		if (!of_property_read_u32(dev->dev.of_node, "broadcom,depth", &val))
+			fbdepth = val;
+	}
+
 	fb = kmalloc(sizeof(struct bcm2708_fb), GFP_KERNEL);
 	if (!fb) {
 		dev_err(&dev->dev,
@@ -612,12 +623,19 @@ static int bcm2708_fb_remove(struct platform_device *dev)
 	return 0;
 }
 
+static const struct of_device_id bcm2708_fb_of_match[] = {
+        { .compatible = "brcm,bcm2708-fb" },
+        {},
+};
+MODULE_DEVICE_TABLE(of, bcm2708_fb_of_match);
+
 static struct platform_driver bcm2708_fb_driver = {
 	.probe = bcm2708_fb_probe,
 	.remove = bcm2708_fb_remove,
 	.driver = {
 		   .name = DRIVER_NAME,
 		   .owner = THIS_MODULE,
+		   .of_match_table = bcm2708_fb_of_match,
 		   },
 };
 
diff --git a/sound/arm/bcm2835.c b/sound/arm/bcm2835.c
index d5ad830..180ac7a 100755
--- a/sound/arm/bcm2835.c
+++ b/sound/arm/bcm2835.c
@@ -217,6 +217,12 @@ static int snd_bcm2835_alsa_resume(struct platform_device *pdev)
 
 #endif
 
+static const struct of_device_id bcm2835_alsa_match[] = {
+	{ .compatible = "brcm,bcm2835-audio", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, bcm2835_alsa_match);
+
 static struct platform_driver bcm2835_alsa0_driver = {
 	.probe = snd_bcm2835_alsa_probe,
 	.remove = snd_bcm2835_alsa_remove,
@@ -227,6 +233,7 @@ static struct platform_driver bcm2835_alsa0_driver = {
 	.driver = {
 		   .name = "bcm2835_AUD0",
 		   .owner = THIS_MODULE,
+		   .of_match_table = bcm2835_alsa_match,
 		   },
 };
 
